{"version":3,"sources":["components/OpenSeadragon_viewer.js","components/Controller.js","App.js","serviceWorker.js","index.js"],"names":["OpenSeadragonViewer","_useState","useState","concat","process","url","Object","slicedToArray","options","id","tileSources","Image","xmlns","Url","Format","ServerFormat","Overlap","TileSize","Size","Height","Width","zoomInButton","zoomOutButton","homeButton","fullPageButton","useEffect","OpenSeadragon","react_default","a","createElement","className","Controller","type","aria-label","App","components_Controller","OpenSeadragon_viewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JA2DeA,QAvDa,WAAM,IAAAC,EAkBlBC,mBAAQ,GAAAC,OAAIC,kBAAJ,gBAAfC,EAlByBC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,MAqB1BO,EAAU,CACdC,GAAI,YACJC,YAAa,CACXC,MAAO,CACLC,MAAO,6CACPC,IAAKR,EACLS,OAAQ,MACRC,aAAc,UACdC,QAAS,IACTC,SAAU,MACVC,KAAM,CACJC,OAAQ,OACRC,MAAO,UAIbC,aAAc,SACdC,cAAe,UACfC,WAAY,QACZC,eAAgB,YASlB,OAJAC,oBAAU,WACRC,IAAclB,IACb,CAACA,EAASH,IAIXsB,EAAAC,EAAAC,cAAA,OAAKpB,GAAG,YAAYqB,UAAU,gBCPnBC,EAvCI,kBACjBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEpB,GAAG,SACHqB,UAAU,gBACVE,KAAK,SACLC,aAAW,aAGfN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEpB,GAAG,UACHqB,UAAU,iBACVE,KAAK,SACLC,aAAW,cAGfN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEpB,GAAG,QACHqB,UAAU,eACVE,KAAK,SACLC,aAAW,WAGfN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEpB,GAAG,WACHqB,UAAU,kBACVE,KAAK,SACLC,aAAW,kBC1BNC,EAVH,kBACVP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACM,EAAD,MACAR,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBCEDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f40b40d8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport OpenSeadragon from 'openseadragon';\nimport '../styles/App.css';\n\nconst OpenSeadragonViewer = () => {\n  // Assumption:\n  // The url in options is prone to change while other values will not change.\n  // The url is set to be a state, assuming that it may dynamically fetch data\n  // or if a users select an option from an input that displays a certain image.\n  // (Here setUrl is omitted because there is no action to dynamically update the url).\n  // ---OR---\n  // If all the values in options are hard-coded,\n  // then options can be saved in a separate javascript (e.g. options.js) file to be exported,\n  // this js file will be imported to this component (e.g. import options from \"./options.js\"),\n  // and passed to OpenSeadragon (e.g. OpenSeadragon(options))\n  // the second argument of the useEffect will be an empty array ([]).\n  // import options from \"./options.js\"\n  // useEffect (() => {\n  //   OpenSeadragon(options)\n  // }, [])\n\n  // Set url as the state\n  const [url] = useState(`${process.env.PUBLIC_URL}/dzi_files/`);\n\n  // See below for notes on each values\n  const options = {\n    id: 'container',\n    tileSources: {\n      Image: {\n        xmlns: 'http://schemas.microsoft.com/deepzoom/2009',\n        Url: url,\n        Format: 'jpg',\n        ServerFormat: 'Default',\n        Overlap: '1',\n        TileSize: '256',\n        Size: {\n          Height: '3136',\n          Width: '4704',\n        },\n      },\n    },\n    zoomInButton: 'zoomin',\n    zoomOutButton: 'zoomout',\n    homeButton: 'reset',\n    fullPageButton: 'fullpage',\n  };\n\n  // useEffect: OSD runs after the div mounts to the DOM\n  // OSD re-runs when options the url and options change\n  useEffect(() => {\n    OpenSeadragon(options);\n  }, [options, url]);\n\n  return (\n  // OSD is rendered inside this div\n    <div id=\"container\" className=\"container\" />\n  );\n};\n\nexport default OpenSeadragonViewer;\n\n\n// ---options to pass to OSD viewer---\n// id : the id of the element to which OSD will be rendered.\n// tileSources: information on image files\n// zoomInButton...fullPageButton: customizing navigation buttons.\n// Here, each value of keys should match the id of the element will perform the action\n// (e.g. <a id=\"zoom-in\"></a> for the value \"zoom-in\")\n\n// Notice: the file path of \"Url\" in Image is pointing to the public folder.\n// This prevents image loading error.\n// In order for images to load, it is recommended/required to import images to a component.\n// The images will be processed by webpack but by putting them in the public folder,\n// the webpack will not process the images and assets live outside of the system.\n// In order to use OSD, the assets should live in the public folder.\n// This will give OSD direct access to the assets.\n","import React from 'react';\n\n\n// The component is named controller rather than a navigator.\n// In OSD, the navigator is a mini-map that shows the current location within an image.\n\n// The id of button should match the values specified in the options for OSD\n// aria-label is added for accessibility\n\nconst Controller = () => (\n  <nav>\n    <ul className=\"controller\">\n      <li>\n        <button\n          id=\"zoomin\"\n          className=\"zoomin_button\"\n          type=\"button\"\n          aria-label=\"zoom in\"\n        />\n      </li>\n      <li>\n        <button\n          id=\"zoomout\"\n          className=\"zoomout_button\"\n          type=\"button\"\n          aria-label=\"zoom out\"\n        />\n      </li>\n      <li>\n        <button\n          id=\"reset\"\n          className=\"reset_button\"\n          type=\"button\"\n          aria-label=\"reset\"\n        />\n      </li>\n      <li>\n        <button\n          id=\"fullpage\"\n          className=\"fullpage_button\"\n          type=\"button\"\n          aria-label=\"full page\"\n        />\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Controller;\n","import React from 'react';\nimport OpenseadragonViewer from './components/OpenSeadragon_viewer';\nimport Controller from './components/Controller';\nimport './styles/App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <section>\n      <Controller />\n      <OpenseadragonViewer />\n      <div className=\"deco_bar\" />\n    </section>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}